Y = B%*%Y
X = c(X, D%*%Y)
}
stats::optim(fn = fn2, par = c(0, 0.1), Tx = Tx, PAR = PAR, Bfn = Bfn, X = X)$par
X
AR
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 21)))*seq(0.05, 0.4, length.out = 21)
Tx <- seq(0.05, 0.3, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(AR)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
stats::optim(fn = fn2, par = c(0, 0.1), Tx = Tx, PAR = PAR, Bfn = Bfn, X = X)$par
AR
devtools::load_all()
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 21)))*seq(0.05, 0.4, length.out = 21)
Tx <- seq(0.05, 0.3, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(AR)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, Tx, PAR)
sum(head(AR, -1) - AR2)
AR
AR2
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 21)))*seq(0.05, 0.4, length.out = 21)
Tx <- seq(0.05, 0.3, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(AR)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
stats::optim(fn = fn2, par = c(0, 0.1), Tx = Tx, PAR = PAR, Bfn = Bfn, X = X)$par
params = stats::optim(fn = fn2, par = c(0, 0.1), Tx = Tx, PAR = PAR, Bfn = Bfn, X = X)$par
PR2AR(X, Tx, PAR, cpp = F)
simAR(X, Tx, PAR, cpp = F)
simAR(X, Tx, PAR, Bfn, cpp = F)
fn2 <- function(params, Tx, PAR, Bfn, X) {
A0 = params[1]
A1 = params[2]
D = makeD(PAR)
PAR$A = A0
PAR$rho = Tx[1]
Y0 = findYeq(PAR, Bfn)
PAR$A = A1
PAR$rho = Tx[1]
B1 = Bfn(PAR)
Y1 = B1 %*% Y0
PAR$rho = Tx[2]
B2 = Bfn(PAR)
Y2 = B2 %*% Y1
return(as.numeric(sum(abs(X[1] - D %*% Y1)) + sum(abs(X[2] - D %*% Y2))))
}
stats::optim(fn = fn2, par = c(0, 0.1), Tx = Tx, PAR = PAR, Bfn = Bfn, X = X)$par
simAR(X, Tx, PAR, Bfn, cpp = F)
devtools::load_all()
simAR(X, Tx, PAR, Bfn, cpp = F)
Ar
AR
devtools::load_all()
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 21)))*seq(0.05, 0.4, length.out = 21)
Tx <- seq(0.05, 0.3, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(AR)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, Tx, PAR, cpp = F)
sum(head(AR, -1) - AR2)
AR
AR2
simAR(X, Tx, PAR, Bfn, cpp = F)
sum(head(AR, -1) - head(AR2, -1))
AR2 = simAR(X, Tx, PAR, Bfn, cpp = F)
AR2
head(AR2, -1)
head(AR, -1)
params = stats::optim(fn = fn2, par = c(0, 0.1), Tx = Tx, PAR = PAR, Bfn = Bfn, X = X)$par
params
# Set up equilibrium start values
outA = PAR$A = c(params[1])
PAR$rho = Tx[1]
Y0 = findYeq(PAR, Bfn)
PAR$A = c(params[2])
outA = c(outA, PAR$A)
outA
devtools::load_all()
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 21)))*seq(0.05, 0.4, length.out = 21)
Tx <- seq(0.05, 0.3, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(AR)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = simAR(X, Tx, PAR, Bfn, cpp = F)
sum(head(AR, -1) - head(AR2, -1))
# AR2 = PR2AR(X, Tx, PAR, cpp = F)
expect_less_than(sum(head(AR, -1) - head(AR2, -1)), 0.0001)
expect_lt(sum(head(AR, -1) - head(AR2, -1)), 0.0001)
PR2AR(X, Tx, PAR, cpp = F)
if (any(is.na(X))) {
if (!eq) {
return(rep(NA, length(X)))
} else {
return(list(A = rep(NA, length(X)), Y = matrix(NA, nrow = length(makeD(PAR)), ncol = length(X))))
}
}
if (PAR$In > 1 & PAR$Cn > 0) {
Bfn = makeBdrugs_age
} else if (PAR$In > 1) {
Bfn = makeBage
} else if (PAR$Cn > 0) {
Bfn = makeBdrugs
} else {
Bfn = makeB
}
eq = F
cpp = T
simAR(X, Tx, PAR, Bfn, cpp = cpp)
PAR
PR2AR(X, Tx, PAR, cpp = F)
if (any(is.na(X))) {
if (!eq) {
return(rep(NA, length(X)))
} else {
return(list(A = rep(NA, length(X)), Y = matrix(NA, nrow = length(makeD(PAR)), ncol = length(X))))
}
}
if (PAR$In > 1 & PAR$Cn > 0) {
Bfn = makeBdrugs_age
} else if (PAR$In > 1) {
Bfn = makeBage
} else if (PAR$Cn > 0) {
Bfn = makeBdrugs
} else {
Bfn = makeB
}
PR2AR <- function(X, Tx, PAR, eq = F, showMessages = F, cpp = T) {
if (any(is.na(X))) {
if (!eq) {
return(rep(NA, length(X)))
} else {
return(list(A = rep(NA, length(X)), Y = matrix(NA, nrow = length(makeD(PAR)), ncol = length(X))))
}
}
if (PAR$In > 1 & PAR$Cn > 0) {
Bfn = makeBdrugs_age
} else if (PAR$In > 1) {
Bfn = makeBage
} else if (PAR$Cn > 0) {
Bfn = makeBdrugs
} else {
Bfn = makeB
}
if (eq) {
outA <- PR2AReq(X, Tx, PAR, Bfn, showMessages)
} else {
outA <- simAR(X, Tx, PAR, Bfn, cpp = cpp)
}
return(outA)
}
PR2AR(X, Tx, PAR, cpp = F)
X
Tx
if (any(is.na(X))) {
if (!eq) {
return(rep(NA, length(X)))
} else {
return(list(A = rep(NA, length(X)), Y = matrix(NA, nrow = length(makeD(PAR)), ncol = length(X))))
}
}
if (PAR$In > 1 & PAR$Cn > 0) {
Bfn = makeBdrugs_age
} else if (PAR$In > 1) {
Bfn = makeBage
} else if (PAR$Cn > 0) {
Bfn = makeBdrugs
} else {
Bfn = makeB
}
if (eq) {
outA <- PR2AReq(X, Tx, PAR, Bfn, showMessages)
} else {
outA <- simAR(X, Tx, PAR, Bfn, cpp = cpp)
}
outA
cpp
cpp = F
simAR(X, Tx, PAR, Bfn, cpp = cpp)
any(is.na(X))
X
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 21)))*seq(0.05, 0.4, length.out = 21)
Tx <- seq(0.05, 0.3, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(Tx)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = simAR(X, Tx, PAR, Bfn, cpp = F)
PR2AR(X, Tx, PAR, cpp = F)
PR2AR(X, Tx, PAR, cpp = T)
AR
head(AR[-1], -1)
devtools::load_all()
AR2 = PR2AR(X, Tx, PAR, cpp = T)
AR3 = PR2AR(X, Tx, PAR, cpp = F)
Ar2
AR2
AR3
devtools::load_all()
AR2 = PR2AR(X, Tx, PAR, cpp = T)
AR3 = PR2AR(X, Tx, PAR, cpp = F)
AR3
sum(AR2 - AR3)
sum(head(AR[-1], -1) - AR2)
sum(head(AR[-1], -1) - AR3)
## Exposure class
params = stats::optim(fn = fn2, par = c(0, 0.1), Tx = Tx, PAR = PAR, Bfn = Bfn, X = X)$par
PAR$A = c(params[1])
PAR$rho = Tx[1]
Y0 = findYeq(PAR, Bfn)
outA = PAR$A = c(params[2])
B = Bfn(PAR)
Y = B %*% Y0
PAR$rho = Tx[i - 1]
V1 = makeV(PAR, Bfn)
W = makeW(PAR, Bfn)
PAR$rho = Tx[i]
V2 = makeV(PAR, Bfn)
as.numeric((X[i] - D %*% V2 %*% V1 %*% Y)/(D %*% V2 %*% W %*% Y))
## Exposure class
params = stats::optim(fn = fn2, par = c(0, 0.1), Tx = Tx, PAR = PAR, Bfn = Bfn, X = X)$par
params
# Set up equilibrium start values
PAR$A = c(params[1])
PAR$rho = Tx[1]
Y0 = findYeq(PAR, Bfn)
outA = PAR$A = c(params[2])
B = Bfn(PAR)
Y = B %*% Y0
PAR$rho = Tx[i - 1]
V1 = makeV(PAR, Bfn)
W = makeW(PAR, Bfn)
PAR$rho = Tx[i]
V2 = makeV(PAR, Bfn)
as.numeric((X[i] - D %*% V2 %*% V1 %*% Y)/(D %*% V2 %*% W %*% Y))
i = 3
# Set up equilibrium start values
PAR$A = c(params[1])
PAR$rho = Tx[1]
Y0 = findYeq(PAR, Bfn)
outA = PAR$A = c(params[2])
B = Bfn(PAR)
Y = B %*% Y0
PAR$rho = Tx[i - 1]
V1 = makeV(PAR, Bfn)
W = makeW(PAR, Bfn)
PAR$rho = Tx[i]
V2 = makeV(PAR, Bfn)
as.numeric((X[i] - D %*% V2 %*% V1 %*% Y)/(D %*% V2 %*% W %*% Y))
AR[2]
AR[3]
AR4
AR3
AR
AR[-1]
AR3
AR2
check()
devtools::check()
n = 400
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
Tx <- seq(0.05, 0.3, length.out = n)
AR
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(Tx)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
X
AR2 = PR2AR(X, Tx, PAR, cpp = T)
AR3 = PR2AR(X, Tx, PAR, cpp = F)
expect_lt(x
, 0.0001)
sum(head(AR[-1], -1) - AR2)
AR[1:20]
AR2[1:20]
AR3[1:20]
n = 100
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
AR
n = 100
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
Tx <- seq(0.05, 0.3, length.out = n)
Tc
Tx
n = 100
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
Tx <- seq(0.05, 0.3, length.out = n)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(Tx)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, Tx, PAR, cpp = T)
AR3 = PR2AR(X, Tx, PAR, cpp = F)
AR2[1:20]
AR[1:20]
AR[2:21]
AR3[2:21]
AR[1:20]
AR[2:21]
AR2[1:20]
AR3[1:20]
n = 200
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
Tx <- seq(0.05, 0.3, length.out = n)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(Tx)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, Tx, PAR, cpp = T)
AR3 = PR2AR(X, Tx, PAR, cpp = F)
AR[2:21]
AR2[1:20]
AR3[1:20]
n = 600
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
Tx <- seq(0.05, 0.3, length.out = n)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(Tx)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, Tx, PAR, cpp = T)
AR3 = PR2AR(X, Tx, PAR, cpp = F)
AR[2:21]
AR2[1:20]
AR3[1:20]
n = 30
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
Tx <- seq(0.05, 0.3, length.out = n)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(Tx)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, Tx, PAR, cpp = T)
AR3 = PR2AR(X, Tx, PAR, cpp = F)
AR[2:21]
AR2[1:20]
AR3[1:20]
n = 20
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
Tx <- seq(0.05, 0.3, length.out = n)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(Tx)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, Tx, PAR, cpp = T)
AR3 = PR2AR(X, Tx, PAR, cpp = F)
AR[2:21]
AR2[1:20]
AR3[1:20]
AR[2:20]
AR2[1:19]
AR3[1:19]
check()
devtools::check()
devtools::check()

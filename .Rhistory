PAR$A = c(params[1])
Y0 = findYeq(PAR, Bfn)
outA = PAR$A = c(params[2])
B = Bfn(PAR)
Y = B %*% Y0
# outY[, 1] = Y
# Simulate forward
for (i in 3:length(X)) {
outA[i - 1] = PAR$A = as.numeric((X[i] - D %*% V %*% V %*% Y)/(D %*% V %*% W %*% Y))
B = Bfn(PAR)
Y = B %*% Y
# outY[, i - 1] = Y
}
} else {
## No exposure class
# Set up equilibrium start values
forwardA = PAR$A = optimA(X[1], PAR, Bfn)
Y = findYeq(PAR, Bfn)
outY[, 1] = Y
# Simulate forward
for (i in 2:length(X)) {
forwardA[i] = PAR$A = as.numeric((X[i] - D %*% V %*% Y)/(D %*% W %*% Y))
B = Bfn(PAR)
Y = B %*% Y
outY[, i] = Y
}
}
return(list(A = outA, Y = outY))
}
pct <- proc.time()
n = 4000
Amat1 = matrix(nrow = 17, ncol = n)
for(i in 1:n) {
Amat1[, i] = findA(V, W, D, X, inputA)
}
(proc.time() - pct)
pct <- proc.time()
Amat2 = matrix(nrow = 17, ncol = n)
for(i in 1:n) {
Amat2[, i] = simAR(X, PAR, makeBdrugs_age)$A
}
(proc.time() - pct)
simAR <- function(X, PAR, Bfn) {
V = makeV(PAR, Bfn)
W = makeW(PAR, Bfn)
D = makeD(PAR)
# outY <- matrix(nrow = length(D), ncol = length(X))
if (PAR$In > 1) {
## Exposure class
params = stats::optim(fn = fn2, par = c(0, 0.1), PAR = PAR, Bfn = Bfn, X = X)$par
# Set up equilibrium start values
PAR$A = c(params[1])
Y0 = findYeq(PAR, Bfn)
outA = PAR$A = c(params[2])
B = Bfn(PAR)
Y = B %*% Y0
# outY[, 1] = Y
# Simulate forward
for (i in 3:length(X)) {
outA[i - 1] = PAR$A = as.numeric((X[i] - D %*% V %*% V %*% Y)/(D %*% V %*% W %*% Y))
B = Bfn(PAR)
Y = B %*% Y
# outY[, i - 1] = Y
}
} else {
## No exposure class
# Set up equilibrium start values
forwardA = PAR$A = optimA(X[1], PAR, Bfn)
Y = findYeq(PAR, Bfn)
outY[, 1] = Y
# Simulate forward
for (i in 2:length(X)) {
forwardA[i] = PAR$A = as.numeric((X[i] - D %*% V %*% Y)/(D %*% W %*% Y))
B = Bfn(PAR)
Y = B %*% Y
outY[, i] = Y
}
}
# return(list(A = outA, Y = outY))
return(list(A = outA))
}
X = rnorm(18, 1, 0.05) * seq(0.5, 0.7, length.out = 18)
inputA = optim(fn = fn2, par = c(0, 0.1), PAR = PAR, Bfn = Bfn, X = X)$par
pct <- proc.time()
n = 4000
Amat1 = matrix(nrow = 17, ncol = n)
for(i in 1:n) {
Amat1[, i] = findA(V, W, D, X, inputA)
}
(proc.time() - pct)
pct <- proc.time()
Amat2 = matrix(nrow = 17, ncol = n)
for(i in 1:n) {
Amat2[, i] = simAR(X, PAR, makeBdrugs_age)$A
}
(proc.time() - pct)
library(Rcpp)
library(RcppEigen)
sourceCpp("src/forward_sim.cpp")
library(Rcpp)
library(RcppEigen)
sourceCpp("src/forward_sim.cpp")
sourceCpp("src/forward_sim.cpp")
library(Rcpp)
library(RcppEigen)
sourceCpp("src/forward_sim.cpp")
library(Rcpp)
library(RcppEigen)
sourceCpp("src/forward_sim.cpp")
library(Rcpp)
library(RcppEigen)
sourceCpp("src/forward_sim.cpp")
check()
devtools::check()
library(pr2ar)
check()
devtools::check()
devtools::check()
devtools::check()
usethis::edit_r_makevars()
usethis::edit_r_makevars()
devtools::check()
pkgdown::build_site()
install.packages("covr")
devtools::check()
pkgdown::build_site()
install.packages("malariaAtlas")
library(malariaAtlas)
getShp(ISO = "UGA", admin_level = c("admin0", "admin1"))
MDG_PfPR <- getRaster(surface = "Plasmodium falciparum PR2-10", shp = UGA.shp, year = 2000:2017)
UGA.shp <- getShp(ISO = "UGA")
MDG_PfPR <- getRaster(surface = "Plasmodium falciparum PR2-10", shp = UGA.shp, year = 2000:2017)
MDG_PfPR <- getRaster(surface = "Plasmodium falciparum PR2-10", shp = UGA.shp, year = 2000:2015)
usethis::use_test("forwardBackward")
AR <- (1 + 0.1*sin(seq(0, 10, length.out = length(20))))*seq(0.05, 0.4, length.out = 20)
plot(AR)
(1 + 0.1*sin(seq(0, 10, length.out = length(20))))
sin(seq(0, 10, length.out = length(20)))
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
plot(AR)
Bfn = makeBdrugs_age
PAR = list(A = 0.1, rho = 0.1, In = 5, Cn = 2, Q = 0.95)
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
Y <- findYeq(PAR, Bfn)
X <- c(D%*%Y)
for(i in 2:length(AR)) {
PAR$A = AR[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
Y <- findYeq(PAR, Bfn)
Y
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
Y <- findYeq(PAR, Bfn)
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
Y <- findYeq(PAR, Bfn)
X <- c(D%*%Y)
for(i in 2:length(AR)) {
PAR$A = AR[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
X
PR2AR(X, PAR)
library(pr2ar)
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
Y <- findYeq(PAR, Bfn)
X <- c(D%*%Y)
for(i in 2:length(AR)) {
PAR$A = AR[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
packrat::unused_packages()
library(pr2ar)
packrat::clean("malariaAtlas")
packrat::status()
packrat::disable()
check()
devtools::check()
install.packages(c("data.table", "ggplot2"))
install.packages(c("data.table", "ggplot2"))
devtools::check()
install.packages("knitr")
devtools::check()
install.packages("rmarkdown")
library(pr2ar)
pr2ar::
library(pr2ar)
install.packages("raster")
library(pr2ar)
install.packages("raster")
install.packages("raster")
install.packages("raster")
install.packages("raster")
library(pr2ar)
Bfn = makeBdrugs_age
devtools::check()
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
Y <- findYeq(PAR, Bfn)
X <- c(D%*%Y)
for(i in 2:length(AR)) {
PAR$A = AR[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
expect_less_than(sum(PR2AR(X, PAR))
})
PR2AR(X, PAR)
library(pr2ar)
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
Y <- findYeq(PAR, Bfn)
X <- c(D%*%Y)
for(i in 2:length(AR)) {
PAR$A = AR[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
PR2AR(X, PAR)
library(pr2ar)
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
Y <- findYeq(PAR, Bfn)
X <- c(D%*%Y)
for(i in 2:length(AR)) {
PAR$A = AR[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
PR2AR(X, PAR)
devtools::check()
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
Y <- findYeq(PAR, Bfn)
X <- c(D%*%Y)
for(i in 2:length(AR)) {
PAR$A = AR[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, PAR)
devtools::check()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::document()
devtools::document()
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
Y <- findYeq(PAR, Bfn)
X <- c(D%*%Y)
for(i in 2:length(AR)) {
PAR$A = AR[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, PAR)
simAR <- function(X, PAR, Bfn, cpp = T) {
V = makeV(PAR, Bfn)
W = makeW(PAR, Bfn)
D = makeD(PAR)
# outY <- matrix(nrow = length(D), ncol = length(X))
if (PAR$In > 1) {
## Exposure class
params = stats::optim(fn = fn2, par = c(0, 0.1), PAR = PAR, Bfn = Bfn, X = X)$par
if(cpp) {
outA <- .Call(simA2, V, W, D, X, params)
} else {
# Set up equilibrium start values
PAR$A = c(params[1])
Y0 = findYeq(PAR, Bfn)
outA = PAR$A = c(params[2])
B = Bfn(PAR)
Y = B %*% Y0
# outY[, 1] = Y
# Simulate forward
for (i in 3:length(X)) {
outA[i - 1] = PAR$A = as.numeric((X[i] - D %*% V %*% V %*% Y)/(D %*% V %*% W %*% Y))
B = Bfn(PAR)
Y = B %*% Y
# outY[, i - 1] = Y
}
}
} else {
## No exposure class
# Set up equilibrium start values
outA = PAR$A = c(optimA(X[1], PAR, Bfn))
if(cpp) {
outA = simA1(V, W, D, X, outA)
} else {
Y = findYeq(PAR, Bfn)
# outY[, 1] = Y
# Simulate forward
for (i in 2:length(X)) {
outA[i] = PAR$A = as.numeric((X[i] - D %*% V %*% Y)/(D %*% W %*% Y))
B = Bfn(PAR)
Y = B %*% Y
# outY[, i] = Y
}
}
}
# return(list(A = outA, Y = outY))
return(list(A = outA))
}
simAR(X, PAR, Bfn)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(pr2ar)
pr2ar::makeD
devtools::load_all()
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
Y <- findYeq(PAR, Bfn)
X <- c(D%*%Y)
for(i in 2:length(AR)) {
PAR$A = AR[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, PAR)
devtools::check()
simA1(V, W, D, X, iinputA )
library(Rcpp)
library(RcppEigen)
sourceCpp("src/forward_sim.cpp")
PAR = list()
r = 1 / 200
dt = 10
PAR$A = 0.1
PAR$Q = exp(-r *dt)
PAR$In = 5
PAR$Cn = 2
PAR$rho = 0.1
Bfn = makeBdrugs_age
Y = findYeq(PAR, Bfn)
D = makeD(PAR)
W = makeW(PAR, Bfn)
V = makeV(PAR, Bfn)
X = rnorm(18, 1, 0.05) * seq(0.5, 0.7, length.out = 18)
inputA = optim(fn = fn2, par = c(0, 0.1), PAR = PAR, Bfn = Bfn, X = X)$par
pct <- proc.time()
n = 4000
Amat1 = matrix(nrow = 17, ncol = n)
for(i in 1:n) {
Amat1[, i] = simA2(V, W, D, X, inputA)
}
(proc.time() - pct)
library(pr2ar)
rm(list = ls())
library(pr2ar)
library(Rcpp)
library(RcppEigen)
sourceCpp("src/forward_sim.cpp")
PAR = list()
r = 1 / 200
dt = 10
PAR$A = 0.1
PAR$Q = exp(-r *dt)
PAR$In = 5
PAR$Cn = 2
PAR$rho = 0.1
Bfn = makeBdrugs_age
Y = findYeq(PAR, Bfn)
D = makeD(PAR)
W = makeW(PAR, Bfn)
V = makeV(PAR, Bfn)
X = rnorm(18, 1, 0.05) * seq(0.5, 0.7, length.out = 18)
inputA = optim(fn = fn2, par = c(0, 0.1), PAR = PAR, Bfn = Bfn, X = X)$par
pct <- proc.time()
n = 4000
Amat1 = matrix(nrow = 17, ncol = n)
for(i in 1:n) {
Amat1[, i] = simA2(V, W, D, X, inputA)
}
(proc.time() - pct)
devtools::load_all()
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
Y <- findYeq(PAR, Bfn)
X <- c(D%*%Y)
for(i in 2:length(AR)) {
PAR$A = AR[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, PAR)
devtools::use_rcpp()
usethis::use_rcpp()
library(pr2ar)
Bfn = makeBdrugs_age
PAR = list(rho = 0.1, In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = 20)))*seq(0.05, 0.4, length.out = 20)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
Y <- findYeq(PAR, Bfn)
X <- c(D%*%Y)
for(i in 2:length(AR)) {
PAR$A = AR[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, PAR)
library(pr2ar)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(pr2ar)
X = rnorm(18, 1, 0.05) * seq(0.5, 0.7, length.out = 18)
PAR = list()
r = 1 / 200
dt = 10
PAR$A = 0.1
PAR$Q = exp(-r *dt)
PAR$In = 5
PAR$Cn = 2
PAR$rho = 0.1
PR2AR(X, PAR)
PAR = list()
r = 1 / 200
dt = 10
PAR$A = 0.1
PAR$Q = exp(-r *dt)
PAR$In = 5
PAR$Cn = 2
PAR$rho = 0.1
Bfn = makeBdrugs_age
Y = findYeq(PAR, Bfn)
D = makeD(PAR)
W = makeW(PAR, Bfn)
V = makeV(PAR, Bfn)
X = rnorm(18, 1, 0.05) * seq(0.5, 0.7, length.out = 18)
inputA = optim(fn = fn2, par = c(0, 0.1), PAR = PAR, Bfn = Bfn, X = X)$par
pct <- proc.time()
n = 4000
Amat1 = matrix(nrow = 17, ncol = n)
for(i in 1:n) {
Amat1[, i] = simA2(V, W, D, X, inputA)
}
(proc.time() - pct)
devtools::load_all()
devtools::load_all()

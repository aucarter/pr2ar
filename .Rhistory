str(ACT_df)
?malariaAtlas
vignette('malariaAtlas')
autoplot(PfPR2_10_df, shp_df = sho)
autoplot(PfPR2_10_df, shp_df = shp)
autoplot(ACT_df, shp_df = shp)
listData()
listData("raster")
# Set paramaeters of model
PAR = list(A = 0.1, rho = 0.4, Q = 0.95, In = 5, Cn = 2)
interpPR <- smooth.spline(x = years, y = M[1,])$y
plot(interpPR)
AR = PR2AR(interpPR, Tx = rep(0.1, length(interpPR)), PAR = PAR)
plot(M[1,-1], type = 'l')
plot(AR, type = 'l')
abline(a = 0, b = 1)
# Set paramaeters of model
PAR = list(A = 0.1, rho = 0.6, Q = 0.95, In = 5, Cn = 2)
interpPR <- smooth.spline(x = years, y = M[1,])$y
plot(interpPR)
AR = PR2AR(interpPR, Tx = rep(0.1, length(interpPR)), PAR = PAR)
plot(M[1,-1], type = 'l')
plot(AR, type = 'l')
abline(a = 0, b = 1)
AR = PR2AR(interpPR, Tx = rep(0.4, length(interpPR)), PAR = PAR)
plot(M[1,-1], type = 'l')
plot(AR, type = 'l')
AR = PR2AR(interpPR, Tx = rep(0.7, length(interpPR)), PAR = PAR)
plot(M[1,-1], type = 'l')
plot(AR, type = 'l')
abline(a = 0, b = 1)
AR = PR2AR(interpPR, Tx = rep(0.5, length(interpPR)), PAR = PAR)
plot(M[1,-1], type = 'l')
plot(AR, type = 'l')
abline(a = 0, b = 1)
interpPR <- smooth.spline(x = years, y = M[1,])$y
plot(interpPR)
AR = PR2AR(interpPR, Tx = rep(0.5, length(interpPR)), PAR = PAR)
plot(M[1,-1], type = 'l')
plot(AR, type = 'l')
plot(M[1,-1], type = 'l')
plot(AR, type = 'l')
plot(M[1,-1], type = 'l')
PR2AR
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = TRUE)
library(data.table); library(ggplot2)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = TRUE)
library(data.table); library(ggplot2)
## Solve for steady states using eigen function and algebraic solution
# Set up example B
dt = 10 # ten day time step
r = 1 / 200 # two hundred day duration of malaria infection
Q = exp(-r*dt)
A = 0.1
PAR = list(A = A, Q = Q)
makeB <- function(PAR) {
A = PAR$A
Q = PAR$Q
cbind(c(1 - A, A), c((1 - A)*(1 - Q), A*(1 - Q) + Q))
}
findYeq <- function(PAR, Bfn) {
B = Bfn(PAR)
e = eigen(B)
first = Re(e$vectors[ ,1])
Yeq = as.vector(first / sum(first))
return(Yeq)
}
Yeq1 = findYeq(PAR, makeB)
Yeq1
# Find steady state algebraically
algebYeq <- function(PAR) {
A = PAR$A
Q = PAR$Q
X = A / (1 - Q*(1 - A))
S  = 1 - X
Yeq = c(S,X)
return(Yeq)
}
Yeq2 = algebYeq(PAR)
Yeq2
# Confirm steady state
B = makeB(PAR)
sum(B %*% Yeq1 - Yeq1)
sum(B %*% Yeq2 - Yeq2)
# Convert attack-rate to equilibrium PR
AR2PR <- function(A, PAR, Bfn, eigen = T) {
PR = c()
for(Ai in A) {
PAR$A = Ai
if(eigen) {
PRi = findYeq(PAR, Bfn)[2]
} else {
PRi = algebYeq(PAR)[2]
}
PR = c(PR, PRi)
}
return(PR)
}
# Plot
A = seq(0, 1, 0.05)
X = AR2PR(A, PAR, makeB)
plot(A, X, type = "l")
## Solve for attack-rate from X using optimize function and algebraic solution
# optimize function
X = c(0.5, 0.6)
fn <- function(A, PAR, Bfn, X) {
PR = AR2PR(A, PAR, Bfn)
return(abs(X - PR))
}
optimA <- function(X, PAR, Bfn) {
A <- c()
for(Xi in X) {
Ai <- optimize(fn, c(0, 1), PAR = PAR, X = Xi, Bfn = Bfn)$minimum
A <- c(A, Ai)
}
return(A)
}
optimA(X, PAR, makeB)
# Algebraic solution
algebA <- function(X, PAR) {
Q = PAR$Q
A = (X - Q*X)/(1 - Q*X)
return(A)
}
algebA(X, PAR)
## Make plots
X = seq(0, 1, 0.05)
A1 <- optimA(X, PAR, makeB)
A2 <- algebA(X, PAR)
plot(X, A1, ylab = "A")
lines(X, A2)
# Convert PR to attack-rate
PR2AReq <- function(X, PAR, Bfn, optim = T) {
if(optim) {
AR = optimA(X, PAR, Bfn)
} else {
AR = algebA(X, PAR)
}
return(AR)
}
# Plot
PAR = list(Q = 0.95)
X = seq(0, 1, 0.01)
AR = PR2AReq(X, PAR)
AR = PR2AReq(X, PAR, makeB)
devtools::check()
n = 20
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
Tx <- seq(0.05, 0.3, length.out = n)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(Tx)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, Tx, PAR, cpp = T)
AR3 = PR2AR(X, Tx, PAR, cpp = F)
expect_lt(sum(head(AR[-1], -1) - AR2), 0.0001, label = "C++ version")
expect_lt(sum(head(AR[-1], -1) - AR3), 0.0001, label = "R version")
n = 20
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
Tx <- seq(0.05, 0.3, length.out = n)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(Tx)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, Tx, PAR, cpp = T)
AR3 = PR2AR(X, Tx, PAR, cpp = F)
AR2 = PR2AR(X, Tx, PAR, Xinterval = 365, cpp = T)
PAR = list(In = 5, Cn = 2, Q = 0.95, dt = 14)
n = 20
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95, dt = 14)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
Tx <- seq(0.05, 0.3, length.out = n)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(Tx)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, Tx, PAR, Xinterval = 365, cpp = T)
AR3 = PR2AR(X, Tx, PAR, Xinterval = 365, cpp = F)
usethis::use_vignette(
"MAP_example"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(malariaAtlas); library(pr2ar); library(data.table)
loc <- "UGA"
years <- 2000:2015
shp <- getShp(ISO = loc)
PfPR2_10 <- getRaster(surface = "Plasmodium falciparum PR2-10", shp = shp, year = years)
PfPR2_10_df <- as.MAPraster(PfPR2_10)
autoplot(PfPR2_10_df, shp_df = shp)
pixPerRast <- table(PfPR2_10_df$raster_name)[[1]]
M = matrix(PfPR2_10_df$z, nrow = pixPerRast, ncol = length(years))
matplot(years, t(M[sample(1:nrow(M), 10),]), type = "l", )
# Set paramaeters of model
PAR = list(A = 0.1, rho = 0.6, Q = 0.95, In = 5, Cn = 2)
AR = PR2AR(M[sample(1:nrow(M), 10),], Tx = rep(0.5, length(M[1,])), PAR = PAR)
plot(M[1,-1], type = 'l')
plot(AR[1], type = 'l')
AR
AR = PR2AR(M[1,], Tx = rep(0.5, length(M[1,])), PAR = PAR)
AR
AR = PR2AR(M[10,], Tx = rep(0.5, length(M[10,])), PAR = PAR)
plot(M[10,-1], AR, type = 'l')
plot(M[10,-1], type = 'l')
lines(AR, lty = "dashed")
plot(M[10,-1], type = 'l')
lines(AR, lty = "dashed")
i = 100
AR = PR2AR(M[i,], Tx = rep(0.5, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l')
lines(AR, lty = "dashed")
plot(M[i,-1], type = 'l', ylim = c(0, 1))
lines(AR, lty = "dashed")
i = 100
AR = PR2AR(M[i,], Tx = rep(0.1, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(0, 1))
lines(AR, lty = "dashed")
i = 100
AR = PR2AR(M[i,], Tx = rep(0.2, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(0, 1))
lines(AR, lty = "dashed")
AR = PR2AR(M[i,], Tx = rep(0.3, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(0, 1))
lines(AR, lty = "dashed")
i = 50
AR = PR2AR(M[i,], Tx = rep(0.3, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(0, 1))
lines(AR, lty = "dashed")
i = 600
AR = PR2AR(M[i,], Tx = rep(0.3, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(0, 1))
lines(AR, lty = "dashed")
i = 700
AR = PR2AR(M[i,], Tx = rep(0.3, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(0, 1))
lines(AR, lty = "dashed")
i = 650
AR = PR2AR(M[i,], Tx = rep(0.3, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(0, 1))
lines(AR, lty = "dashed")
i = 650
AR = PR2AR(M[i,], Tx = rep(0.3, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(-0.1, 1))
lines(AR, lty = "dashed")
PAR = list(A = 0.1, rho = 0.6, Q = 0.95, In = 5, Cn = 2)
i = 650
AR = PR2AR(M[i,], Tx = rep(0.6, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(-0.1, 1))
lines(AR, lty = "dashed")
i = 650
AR = PR2AR(M[i,], Tx = rep(0.5, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(-0.1, 1))
lines(AR, lty = "dashed")
X = M[i, ]
Tx = rep(0.5, length(M[i,]))
# Interpolate inputs to match time step
X = interpRates(X, inStep = Xinterval, outStep = PAR$dt)
Tx = interpRates(Tx, inStep = Xinterval, outStep = PAR$dt)
Xinterval = 365
# Interpolate inputs to match time step
X = interpRates(X, inStep = Xinterval, outStep = PAR$dt)
Tx = interpRates(Tx, inStep = Xinterval, outStep = PAR$dt)
devtools::load_all()
# Set paramaeters of model
PAR = list(A = 0.1, rho = 0.6, Q = 0.95, In = 5, Cn = 2, dt = 10)
i = 650
AR = PR2AR(M[i,], Tx = rep(0.5, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(-0.1, 1))
lines(AR, lty = "dashed")
AR = PR2AR(M[i,], Tx = rep(0.4, length(M[i,])), PAR = PAR)
plot(M[i,-1], type = 'l', ylim = c(-0.1, 1))
lines(AR, lty = "dashed")
devtools::document()
devtools::check()
plot(M[i,-1], type = 'l', ylim = c(0, 1))
lines(AR, lty = "dashed")
legend("topright",  legend = c("PfPR", "Attack-rate"), lty = 1:2)
plot(years, M[i,-1], type = 'l', ylim = c(0, 1), xlab = "Years",  ylab = "Rate")
plot(years[-1], M[i,-1], type = 'l', ylim = c(0, 1), xlab = "Years",  ylab = "Rate")
lines(AR, lty = "dashed")
legend("topright",  legend = c("PfPR", "Attack-rate"), lty = 1:2)
plot(years[-1], M[i,-1], type = 'l', ylim = c(0, 1), xlab = "Years",  ylab = "Rate")
lines(years[-1], AR, lty = "dashed")
legend("topright",  legend = c("PfPR", "Attack-rate"), lty = 1:2)
n = 20
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95, dt = 10)
# Make up attack-rate and treatment rate
AR <- (1 + 0.1*sin(seq(0, 10, length.out = n + 1)))*seq(0.05, 0.4, length.out = n + 1)
Tx <- seq(0.05, 0.3, length.out = n)
# Generate a corresponding vector of prevalence
D <- makeD(PAR)
PAR$A <- AR[1]
PAR$rho <- Tx[1]
Y <- findYeq(PAR, Bfn)
X <- c()
for(i in 1:length(Tx)) {
PAR$A = AR[i + 1]
PAR$rho = Tx[i]
B = Bfn(PAR)
Y = B%*%Y
X = c(X, D%*%Y)
}
AR2 = PR2AR(X, Tx, PAR, Xinterval = 365, cpp = T)
AR3 = PR2AR(X, Tx, PAR, Xinterval = 365, cpp = F)
expect_lt(sum(head(AR[-1], -1) - AR2), 0.0001, label = "C++ version")
expect_lt(sum(head(AR[-1], -1) - AR3), 0.0001, label = "R version")
devtools::check()
devtools::check()
pkgdown::build_articles()
pkgdown::build_articles()
devtools::check()
pkgdown::build_reference_index()
pkgdown::build_site()
## Choose location and years of estimation
loc <- "UGA"
years <- 2000:2015
## Pull shapefile and PfPR raster
shp <- getShp(ISO = loc)
PfPR2_10 <- getRaster(surface = "Plasmodium falciparum PR2-10", shp = shp, year = years)
PfPR2_10_df <- as.MAPraster(PfPR2_10)
autoplot(PfPR2_10_df, shp_df = shp)
## reformation into a matrix
pixPerRast <- table(PfPR2_10_df$raster_name)[[1]]
M = matrix(PfPR2_10_df$z, nrow = pixPerRast, ncol = length(years))
matplot(years, t(M[sample(1:nrow(M), 10),]), type = "l", )
# Set paramaeters of model
PAR = list(A = 0.1, rho = 0.6, Q = 0.95, In = 5, Cn = 2, dt = 10)
i = 650
AR = PR2AR(M[i,], Tx = rep(0.4, length(M[i,])), PAR = PAR)
plot(years[-1], M[i,-1], type = 'l', ylim = c(0, 1), xlab = "Years",  ylab = "Rate")
lines(years[-1], AR, lty = "dashed")
legend("topright",  legend = c("PfPR", "Attack-rate"), lty = 1:2)
devtools::install_github("aucarter/pr2ar")
library(malariaAtlas); library(pr2ar); library(data.table)
# Set paramaeters of model
PAR = list(A = 0.1, rho = 0.6, Q = 0.95, In = 5, Cn = 2, dt = 10)
i = 650
AR = PR2AR(M[i,], Tx = rep(0.4, length(M[i,])), PAR = PAR)
plot(years[-1], M[i,-1], type = 'l', ylim = c(0, 1), xlab = "Years",  ylab = "Rate")
lines(years[-1], AR, lty = "dashed")
legend("topright",  legend = c("PfPR", "Attack-rate"), lty = 1:2)
pkgdown::build_articles()
devtools::build_vignettes()
pkgdown::build_articles()
devtools::build_vignettes()
pkgdown::build_articles()
pkgdown::build_site()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = TRUE)
library(data.table); library(ggplot2)
# Solve for steady states using eigen function and algebraic solution
# Set up example B
dt = 10 # ten day time step
r = 1 / 200 # two hundred day duration of malaria infection
Q = exp(-r*dt)
A = 0.1
PAR = list(A = A, Q = Q)
makeB <- function(PAR) {
A = PAR$A
Q = PAR$Q
cbind(c(1 - A, A), c((1 - A)*(1 - Q), A*(1 - Q) + Q))
}
findYeq <- function(PAR, Bfn) {
B = Bfn(PAR)
e = eigen(B)
first = Re(e$vectors[ ,1])
Yeq = as.vector(first / sum(first))
return(Yeq)
}
Yeq1 = findYeq(PAR, makeB)
Yeq1
# Find steady state algebraically
algebYeq <- function(PAR) {
A = PAR$A
Q = PAR$Q
X = A / (1 - Q*(1 - A))
S  = 1 - X
Yeq = c(S,X)
return(Yeq)
}
Yeq2 = algebYeq(PAR)
Yeq2
# Confirm steady state
B = makeB(PAR)
sum(B %*% Yeq1 - Yeq1)
sum(B %*% Yeq2 - Yeq2)
# Convert attack-rate to equilibrium PR
AR2PR <- function(A, PAR, Bfn, eigen = T) {
PR = c()
for(Ai in A) {
PAR$A = Ai
if(eigen) {
PRi = findYeq(PAR, Bfn)[2]
} else {
PRi = algebYeq(PAR)[2]
}
PR = c(PR, PRi)
}
return(PR)
}
# Plot
A = seq(0, 1, 0.05)
X = AR2PR(A, PAR, makeB)
plot(A, X, type = "l")
## Solve for attack-rate from X using optimize function and algebraic solution
# optimize function
X = c(0.5, 0.6)
fn <- function(A, PAR, Bfn, X) {
PR = AR2PR(A, PAR, Bfn)
return(abs(X - PR))
}
optimA <- function(X, PAR, Bfn) {
A <- c()
for(Xi in X) {
Ai <- optimize(fn, c(0, 1), PAR = PAR, X = Xi, Bfn = Bfn)$minimum
A <- c(A, Ai)
}
return(A)
}
optimA(X, PAR, makeB)
# Algebraic solution
algebA <- function(X, PAR) {
Q = PAR$Q
A = (X - Q*X)/(1 - Q*X)
return(A)
}
algebA(X, PAR)
## Make plots
X = seq(0, 1, 0.05)
A1 <- optimA(X, PAR, makeB)
A2 <- algebA(X, PAR)
plot(X, A1, ylab = "A")
lines(X, A2)
# Convert PR to attack-rate
PR2AReq <- function(X, PAR, Bfn, optim = T) {
if(optim) {
AR = optimA(X, PAR, Bfn)
} else {
AR = algebA(X, PAR)
}
return(AR)
}
install.packages("formatR")
knitr::opts_chunk$set(prompt=T, comment=NA, collapse=T,
tidy=T, tidy.opts=list(width.cutoff=60),
highlight=T,
size="\\normalsize")
options(width=60)
knitr::knit_hooks$set(document = function(x) gsub("```\n+```\n", "", x),
size = function(before, options, envir) if (before) return(options$size))
dir <- "smb://ihme.washington.edu/IHME/HOMES/aucarter/"
load(paste0(dir, "/bootcamp_r_training/data/us_state_cigarette_data.rdata"), verbose=T)
dir <- "/HOMES/aucarter/"
load(paste0(dir, "/bootcamp_r_training/data/us_state_cigarette_data.rdata"), verbose=T)
dir <- "/aucarter/"
load(paste0(dir, "/bootcamp_r_training/data/us_state_cigarette_data.rdata"), verbose=T)
dir <- "/Volumes/aucarter/"
load(paste0(dir, "/bootcamp_r_training/data/us_state_cigarette_data.rdata"), verbose=T)
data <- read.csv("data/education_2015.csv")
mmr <- read.csv(paste0(dir,"bootcamp_r_training/data/mmr_data.csv"), stringsAsFactors=F)
main_dir <- paste0(dir,"bootcamp_r_training/") # CHANGE TO YOUR LOCAL COPY OF THE TRAINING MATERIALS!!
save(all, file=paste0(main_dir, "output/combined_cig_data.rdata"))
tinytex::install_tinytex()
tinytex::tinytex_root())
tinytex::tinytex_root()
